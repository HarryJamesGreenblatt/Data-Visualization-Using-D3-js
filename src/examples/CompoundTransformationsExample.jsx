import getRandomColor from "../utils";

export default function CoumpoundTransformationsExample() {

    // Define the height and width of the SVG container.
    const scrnHeight  = 330;

    // Define the side length of the squares (rectangles with equal sides).
    const sideLength = 35;

    // Initialize an array to hold the transformed rectangles.
    const transformedRects = []

    
    // Loop through the x-coordinates from 25 to 300, incrementing by 50 each time.
    for( let i=25; i < 300; i += 50 ) {

        // Loop through the y-coordinates from 25 to 300, incrementing by 50 each time.
        for( let j=25; j < 300; j += 50 ) {

            // Push a new rectangle into the transformedRects array.
            transformedRects.push(
                <rect

                    // The x-coordinate of the top-left corner of the rectangle.
                    x={0}

                    // The y-coordinate of the top-left corner of the rectangle.
                    y={0}

                    // The width of the rectangle.
                    width={sideLength}

                    // The height of the rectangle.
                    height={sideLength}

                    // The fill color of the rectangle, generated by the getRandomColor function.
                    fill={getRandomColor()}

                    // The stroke color of the rectangle, generated by the getRandomColor function.
                    stroke={getRandomColor()}

                    // The transformation applied to the rectangle. It is translated by (i, j) and then rotated by a random angle between 0 and 45 degrees.
                    transform={`
                        translate(${i},${j}) 
                        rotate(${Math.random() * 45})
                    `}
                >
                </rect>
            )
        }
    }

    // Return the SVG element.
    return(
        <svg width={scrnHeight} height={scrnHeight}>

           {/* Render all the transformed rectangles. */}
           {transformedRects}

        </svg>
    );
    
}
